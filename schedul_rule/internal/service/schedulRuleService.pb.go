// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.17.3
// source: schedulRuleService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchedulRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity      string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	RuleType      string `protobuf:"bytes,2,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`
	StoreIdentity string `protobuf:"bytes,3,opt,name=store_identity,json=storeIdentity,proto3" json:"store_identity,omitempty"`
	RuleDate      string `protobuf:"bytes,4,opt,name=rule_date,json=ruleDate,proto3" json:"rule_date,omitempty"`
}

func (x *SchedulRuleRequest) Reset() {
	*x = SchedulRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedulRuleService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulRuleRequest) ProtoMessage() {}

func (x *SchedulRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_schedulRuleService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulRuleRequest.ProtoReflect.Descriptor instead.
func (*SchedulRuleRequest) Descriptor() ([]byte, []int) {
	return file_schedulRuleService_proto_rawDescGZIP(), []int{0}
}

func (x *SchedulRuleRequest) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *SchedulRuleRequest) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *SchedulRuleRequest) GetStoreIdentity() string {
	if x != nil {
		return x.StoreIdentity
	}
	return ""
}

func (x *SchedulRuleRequest) GetRuleDate() string {
	if x != nil {
		return x.RuleDate
	}
	return ""
}

type SchedulRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulRuleDetail []*SchedulRuleModel `protobuf:"bytes,1,rep,name=SchedulRuleDetail,proto3" json:"SchedulRuleDetail,omitempty"`
	Code              uint32              `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *SchedulRuleResponse) Reset() {
	*x = SchedulRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schedulRuleService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulRuleResponse) ProtoMessage() {}

func (x *SchedulRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_schedulRuleService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulRuleResponse.ProtoReflect.Descriptor instead.
func (*SchedulRuleResponse) Descriptor() ([]byte, []int) {
	return file_schedulRuleService_proto_rawDescGZIP(), []int{1}
}

func (x *SchedulRuleResponse) GetSchedulRuleDetail() []*SchedulRuleModel {
	if x != nil {
		return x.SchedulRuleDetail
	}
	return nil
}

func (x *SchedulRuleResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_schedulRuleService_proto protoreflect.FileDescriptor

var file_schedulRuleService_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x17,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x6d, 0x0a, 0x13, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xf5, 0x02, 0x0a, 0x12, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x11,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schedulRuleService_proto_rawDescOnce sync.Once
	file_schedulRuleService_proto_rawDescData = file_schedulRuleService_proto_rawDesc
)

func file_schedulRuleService_proto_rawDescGZIP() []byte {
	file_schedulRuleService_proto_rawDescOnce.Do(func() {
		file_schedulRuleService_proto_rawDescData = protoimpl.X.CompressGZIP(file_schedulRuleService_proto_rawDescData)
	})
	return file_schedulRuleService_proto_rawDescData
}

var file_schedulRuleService_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_schedulRuleService_proto_goTypes = []interface{}{
	(*SchedulRuleRequest)(nil),  // 0: pb.SchedulRuleRequest
	(*SchedulRuleResponse)(nil), // 1: pb.SchedulRuleResponse
	(*SchedulRuleModel)(nil),    // 2: pb.SchedulRuleModel
}
var file_schedulRuleService_proto_depIdxs = []int32{
	2, // 0: pb.SchedulRuleResponse.SchedulRuleDetail:type_name -> pb.SchedulRuleModel
	0, // 1: pb.SchedulRuleService.SchedulRule:input_type -> pb.SchedulRuleRequest
	0, // 2: pb.SchedulRuleService.SchedulRuleByStoreIdentity:input_type -> pb.SchedulRuleRequest
	0, // 3: pb.SchedulRuleService.SchedulRuleInsert:input_type -> pb.SchedulRuleRequest
	0, // 4: pb.SchedulRuleService.SchedulRuleModify:input_type -> pb.SchedulRuleRequest
	0, // 5: pb.SchedulRuleService.SchedulRuleDelete:input_type -> pb.SchedulRuleRequest
	1, // 6: pb.SchedulRuleService.SchedulRule:output_type -> pb.SchedulRuleResponse
	1, // 7: pb.SchedulRuleService.SchedulRuleByStoreIdentity:output_type -> pb.SchedulRuleResponse
	1, // 8: pb.SchedulRuleService.SchedulRuleInsert:output_type -> pb.SchedulRuleResponse
	1, // 9: pb.SchedulRuleService.SchedulRuleModify:output_type -> pb.SchedulRuleResponse
	1, // 10: pb.SchedulRuleService.SchedulRuleDelete:output_type -> pb.SchedulRuleResponse
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_schedulRuleService_proto_init() }
func file_schedulRuleService_proto_init() {
	if File_schedulRuleService_proto != nil {
		return
	}
	file_schedulRuleModels_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_schedulRuleService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schedulRuleService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schedulRuleService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_schedulRuleService_proto_goTypes,
		DependencyIndexes: file_schedulRuleService_proto_depIdxs,
		MessageInfos:      file_schedulRuleService_proto_msgTypes,
	}.Build()
	File_schedulRuleService_proto = out.File
	file_schedulRuleService_proto_rawDesc = nil
	file_schedulRuleService_proto_goTypes = nil
	file_schedulRuleService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulRuleServiceClient is the client API for SchedulRuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulRuleServiceClient interface {
	SchedulRule(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error)
	SchedulRuleByStoreIdentity(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error)
	SchedulRuleInsert(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error)
	SchedulRuleModify(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error)
	SchedulRuleDelete(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error)
}

type schedulRuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulRuleServiceClient(cc grpc.ClientConnInterface) SchedulRuleServiceClient {
	return &schedulRuleServiceClient{cc}
}

func (c *schedulRuleServiceClient) SchedulRule(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error) {
	out := new(SchedulRuleResponse)
	err := c.cc.Invoke(ctx, "/pb.SchedulRuleService/SchedulRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulRuleServiceClient) SchedulRuleByStoreIdentity(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error) {
	out := new(SchedulRuleResponse)
	err := c.cc.Invoke(ctx, "/pb.SchedulRuleService/SchedulRuleByStoreIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulRuleServiceClient) SchedulRuleInsert(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error) {
	out := new(SchedulRuleResponse)
	err := c.cc.Invoke(ctx, "/pb.SchedulRuleService/SchedulRuleInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulRuleServiceClient) SchedulRuleModify(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error) {
	out := new(SchedulRuleResponse)
	err := c.cc.Invoke(ctx, "/pb.SchedulRuleService/SchedulRuleModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulRuleServiceClient) SchedulRuleDelete(ctx context.Context, in *SchedulRuleRequest, opts ...grpc.CallOption) (*SchedulRuleResponse, error) {
	out := new(SchedulRuleResponse)
	err := c.cc.Invoke(ctx, "/pb.SchedulRuleService/SchedulRuleDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulRuleServiceServer is the server API for SchedulRuleService service.
type SchedulRuleServiceServer interface {
	SchedulRule(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error)
	SchedulRuleByStoreIdentity(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error)
	SchedulRuleInsert(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error)
	SchedulRuleModify(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error)
	SchedulRuleDelete(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error)
}

// UnimplementedSchedulRuleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulRuleServiceServer struct {
}

func (*UnimplementedSchedulRuleServiceServer) SchedulRule(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulRule not implemented")
}
func (*UnimplementedSchedulRuleServiceServer) SchedulRuleByStoreIdentity(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulRuleByStoreIdentity not implemented")
}
func (*UnimplementedSchedulRuleServiceServer) SchedulRuleInsert(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulRuleInsert not implemented")
}
func (*UnimplementedSchedulRuleServiceServer) SchedulRuleModify(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulRuleModify not implemented")
}
func (*UnimplementedSchedulRuleServiceServer) SchedulRuleDelete(context.Context, *SchedulRuleRequest) (*SchedulRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulRuleDelete not implemented")
}

func RegisterSchedulRuleServiceServer(s *grpc.Server, srv SchedulRuleServiceServer) {
	s.RegisterService(&_SchedulRuleService_serviceDesc, srv)
}

func _SchedulRuleService_SchedulRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulRuleServiceServer).SchedulRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SchedulRuleService/SchedulRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulRuleServiceServer).SchedulRule(ctx, req.(*SchedulRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulRuleService_SchedulRuleByStoreIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulRuleServiceServer).SchedulRuleByStoreIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SchedulRuleService/SchedulRuleByStoreIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulRuleServiceServer).SchedulRuleByStoreIdentity(ctx, req.(*SchedulRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulRuleService_SchedulRuleInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulRuleServiceServer).SchedulRuleInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SchedulRuleService/SchedulRuleInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulRuleServiceServer).SchedulRuleInsert(ctx, req.(*SchedulRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulRuleService_SchedulRuleModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulRuleServiceServer).SchedulRuleModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SchedulRuleService/SchedulRuleModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulRuleServiceServer).SchedulRuleModify(ctx, req.(*SchedulRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulRuleService_SchedulRuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulRuleServiceServer).SchedulRuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SchedulRuleService/SchedulRuleDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulRuleServiceServer).SchedulRuleDelete(ctx, req.(*SchedulRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulRuleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SchedulRuleService",
	HandlerType: (*SchedulRuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SchedulRule",
			Handler:    _SchedulRuleService_SchedulRule_Handler,
		},
		{
			MethodName: "SchedulRuleByStoreIdentity",
			Handler:    _SchedulRuleService_SchedulRuleByStoreIdentity_Handler,
		},
		{
			MethodName: "SchedulRuleInsert",
			Handler:    _SchedulRuleService_SchedulRuleInsert_Handler,
		},
		{
			MethodName: "SchedulRuleModify",
			Handler:    _SchedulRuleService_SchedulRuleModify_Handler,
		},
		{
			MethodName: "SchedulRuleDelete",
			Handler:    _SchedulRuleService_SchedulRuleDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedulRuleService.proto",
}
